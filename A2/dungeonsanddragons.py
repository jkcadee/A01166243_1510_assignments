import random
import doctest


def roll_die(number_of_rolls, number_of_sides):
    """Rolls a die with an inputted amount of rolls and sides.
    >>> roll_die(0, 0)
    0
    """
    number = 0
    if number_of_rolls < 1 or number_of_sides <= 1:
        return 0
    for x in range(1, number_of_rolls + 1):
        number += random.randint(1, number_of_sides)
    return number


"""
Return the sum of a integer created from a set of random numbers based on the number of rolls and the die's sides.

:param number_of_rolls: positive integer, must be more than 1.
:param number_of_sides: positive integer, must be more than 0.
:precondition: Both parameters must be positive integers and rolls must be more than 1.
:postcondition: Receive an integer equivalent to the sum of a "die" created by the number_of_sides and rolled however
                many times as specified by number_of_rolls.
:return: An integer equal to the sum of a die created by number_of_sides rolled by number_of_rolls times.
"""


# print(roll_die(3, 6))


def choose_inventory():
    """Chooses an amount of items from a list depending on the number inputted.
    """
    store_list = ["1. Mango's Smashing Steel-Toed Boots",
                  "2. The Swedish Sniper Longbow",
                  "3. Crown of the Mews",
                  "4. Engraved APEX: MMXV Cloak",
                  "5. The Bottomless Hungrypouch",
                  "6. Plup's Sensational Pulper",
                  "7. Zain's Crimson Falchion",
                  "8. Lightning's Summit Axe",
                  "9. The Godslayer's Tome",
                  "10. Cody's Convenient ice Blasting Dragon Wand"]
    temp_stored_items = []

    for x in range(0, len(store_list)):
        print('Welcome to "The Script!", Here is our selection:')
        for item in range(0, len(store_list)):
            print(store_list[item])
        pick_item = int(input('\n What would you like to buy? (-1 to exit) \n'))
        if pick_item == -1:
            break
        elif pick_item == 0:
            print('Hey, you can\'t choose zero items!')
        elif pick_item > 0:
            temp_item = store_list[pick_item - 1]
            space_pos = temp_item.find(' ')
            item_to_print = temp_item[space_pos + 1: len(temp_item)]
            temp_stored_items.append(item_to_print)
        else:
            print(f'Hey you can only pick items from the store list!')
    return temp_stored_items

    # if inventory == [] and selection == 0:
    #     return []
    # elif selection < 0:
    #     print("Hey! You can't have negative items!")
    #     return []
    # elif selection > len(inventory):
    #     print("You are over encumbered.")
    #     over_encumbered_list = inventory.copy()
    #     return sorted(over_encumbered_list)
    # elif selection == len(inventory):
    #     equal_list = inventory.copy()
    #     return sorted(equal_list)
    # else:
    #     result = random.choices(inventory, k=selection)
    #     return sorted(result)


"""
Return a list, with your chosen number of items as how many elements are in the list.

:precondition: List must hae at least one element in it, and integer must be positive.
:postcondition: Create a list with the same amount of elements as what is specified in the parameter.
:return: A list with the chosen amount of elements (determined by parameter) in it. 
"""


# print(choose_inventory(['Sword', 'Dagger', 'Bow', 'Arrows', 'Leather Armour', 'Chainmail', 'Shield', 'Potions'], 4))
# 'Sword', 'Dagger', 'Bow', 'Arrows', 'Leather Armour', 'Chainmail', 'Shield', 'Potions'

def generate_consonant():
    """Generates a consonant."""
    consonant = "BCDFGHJKLMNPQRSTVWXYZ"
    return random.sample(consonant, 1)


"""
Return a list of one character selected randomly from the string of consonants

:postcondition: Return a list of one character selected randomly from the string.
:return: A list with a single character. 
"""


def generate_vowel():
    """Generates a vowel."""
    vowel = "AEIOUY"
    return random.sample(vowel, 1)


"""
Return a list of one character randomly selected from the string of vowels.

:postcondition: Return a list of one character selected randomly from the string.
:return: A list with a single character.
"""


def generate_syllable():
    """Generates a syllable using a consonant and a vowel."""
    syllable = generate_consonant() + generate_vowel()
    return syllable


"""
Return a list with two characters, one generated by generate_consonant and the other by generate_vowel.

:postcondition: Create a list of two characters, generated by the helper functions.
:return: A list with two characters.
"""


def generate_name(syllables):
    """Generates a name from the amount of syllables inputted."""
    syllable = ''
    for x in range(1, syllables + 1):
        name = ''.join(generate_syllable())
        syllable += name
    return syllable.capitalize()


"""
Return a string created by calling generate_syllable the amount of times syllables is called.

:param syllables: A positive integer.
:precondition: Syllables must be a positive integer.
:postcondition: Creating a string with however many syllables as specified by the parameter.  
:return: A string with however many syllables as specified by the parameter.
"""


def select_race():
    races = ['Dragonborn', 'Dwarf', 'Elf', 'Gnome', 'Half-Elf', 'Halfling', 'Half-Orc', 'Human', 'Tiefling']
    return input(f'Select your race, Adventurer: {races} \n')


"""
Return the input for selected race.

:precondition: Input must be one of the nine races.
:postcondition: An inputted string of one of the nine races.
:return: A string of consisting of one of the nine races.
"""


def select_class():
    classes = ['Barbarian', 'Bard', 'Cleric',
               'Druid', 'Fighter', 'Monk',
               'Paladin', 'Ranger', 'Rogue',
               'Sorcerer', 'Warlock', 'Wizard']
    return input(f'Select your class, Adventurer: {classes} \n')


"""
Return the input for selected class.

:precondition: Input must be one of the twelve classes.
:postcondition: An inputted string of one the twelve classes.
:return: A string consisting of one of the twelve classes.
"""


def get_health(chosen_class):
    if chosen_class == 'barbarian':
        health = roll_die(1, 12)
        return health
    elif chosen_class == 'fighter' or chosen_class == 'paladin' or chosen_class == 'ranger':
        health = roll_die(1, 10)
        return health
    elif chosen_class == 'bard' or chosen_class == 'cleric' or chosen_class == 'druid' or \
            chosen_class == 'monk' or chosen_class == 'rogue' or chosen_class == 'warlock':
        health = roll_die(1, 8)
        return health
    elif chosen_class == 'sorcerer' or chosen_class == 'wizard':
        health = roll_die(1, 6)
        return health
    else:
        health = 0
        return health


"""
Return a random integer which is the health value.

:param chosen_class: String which holds the chosen class from select_class.
:precondition: One of the twelve classes must be in the parameter.
:postcondition: A random integer denoting the max health of the character.
:return: An integer which is a randomly generated health value.
"""


def create_character(name_length):
    """Creates a list with a character's name and stats, alongside other values."""
    choose_race = select_race().lower()
    choose_class = select_class().lower()
    max_health = get_health(choose_class)
    character_list = {'Name': generate_name(name_length),
                      'Race': choose_race,
                      'Class': choose_class,
                      'HP': [max_health, max_health],
                      'Strength:': roll_die(3, 6),
                      'Dexterity:': roll_die(3, 6),
                      'Constitution:': roll_die(3, 6),
                      'Intelligence:': roll_die(3, 6),
                      'Wisdom:': roll_die(3, 6),
                      'Charisma:': roll_die(3, 6),
                      'Experience': 0,
                      'Inventory': choose_inventory()}

    return character_list


print(create_character(3))

"""
Return a list with the name of the character and their stats, inventory, race, class and health

:param name_length: A positive integer.
:precondition: Parameter must be a positive integer over 0.
:postcondition: Create a list with the name, stats, inventory, race, class and health of the character.
:return: A list with a name, stats, inventory, race, class and health.
"""


def print_character(character):
    """Prints character."""
    print(character[0])
    for value in range(1, len(character)):
        if len(character[value]) > 0:
            if value < len(character) - 1:
                print(character[value][0], character[value][1])
            else:
                for x in range(0, len(character[value])):
                    print(character[value][x])


"""
Print a list with a name the length of the parameter and the stats.

:param character: A positive integer over 0.
:precondition: Parameter must be positive and over 0.
:postcondition: Print created list from create_character.
:return: Print a list with a name and stats.
"""

# print_character(2)

if __name__ == "__main__":
    doctest.testmod()
